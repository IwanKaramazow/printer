(* module Easy_format = Wadler.Easy_format *)
(* module Easy_wadler = Wadler.Easy_wadler *)

(* let test ~easyFormat ~easyWadler width = *)
  (* let easyFormat =  *)
    (* let buf = Buffer.create 100 in *)
    (* let fauxmatter = Format.formatter_of_buffer buf in *)
    (* let _ = Format.pp_set_margin fauxmatter width in *)
    (* let _ = Easy_format.Pretty.to_formatter fauxmatter easyFormat in *)
    (* Buffer.contents buf *)
  (* in *)
  (* let easyWadler = Wadler.Pretty.pretty width (Easy_wadler.to_doc easyWadler) in *)
  (* if easyFormat = easyWadler.output then  *)
    (* let () = print_endline easyFormat in *)
    (* let () = print_endline easyWadler.output in *)
    (* () *)
  (* else  *)
    (* let open Easy_wadler in *)
    (* let () = print_endline ">>> Test failed" in *)
    (* let () = print_endline ("Easy_format: " ^ (string_of_int @@ String.length easyFormat) ^ "---------------") in *)
    (* let () = print_endline easyFormat in *)
    (* let () = print_endline ("Easy_wadler: " ^ (string_of_int @@ String.length easyWadler.output) ^ "---------------") in *)
    (* let () = print_endline easyWadler.output in *)
    (* let () = print_endline "--------------------------" in *)
    (* print_newline () *)

(* (* simple atom *) *)
(* let () = *)
  (* let ef = *)
    (* let open Easy_format in *)
    (* Atom ("reason", atom) *)
  (* in *)
  (* let ew = let open Easy_wadler in *)
    (* Atom "reason" *)
  (* in *)
  (* test ~easyFormat:ef ~easyWadler:ew 10 *)

(* let () =  *)
  (* let ef = *)
    (* let open Easy_format in *)
    (* let body = *)
      (* let a = Atom ("maxim", atom) in *)
      (* [a; a; a; a; a]  *)
    (* in *)
    (* List (("{", ",", "}", {list with wrap_body = `Never_wrap }), body) *)
  (* in *)
  (* let ew =  *)
    (* let open Easy_wadler in *)
    (* let body = *)
      (* let a = Atom ("maxim") in *)
      (* [a; a; a; a; a]  *)
    (* in *)
    (* List ({default_list_config with separator = ","; opening = "{"; closing = "}" }, body) *)
  (* in *)
  (* test ~easyFormat:ef ~easyWadler:ew 10 *)

(* let () =  *)
  (* let ef = *)
    (* let open Easy_format in *)
    (* let body = *)
      (* let a = Atom ("maxim", atom) in *)
      (* [a; a; a; a; a]  *)
    (* in *)
    (* List (("{", ",", "}", {list with wrap_body = `Never_wrap; align_closing = false }), body) *)
  (* in *)
  (* let ew =  *)
    (* let open Easy_wadler in *)
    (* let body = *)
      (* let a = Atom ("maxim") in *)
      (* [a; a; a; a; a]  *)
    (* in *)
    (* List ({default_list_config with separator = ","; opening = "{"; closing = "}"; align_closing = false }, body) *)
  (* in *)
  (* test ~easyFormat:ef ~easyWadler:ew 10 *)

(* let () = *)
  (* let ef = *)
    (* let open Easy_format in *)
    (* let a = Atom ("let x =", atom) in *)
    (* Label((a, label), Atom ("123", atom)) *)
  (* in *)
  (* let ew = *)
    (* let open Easy_wadler in *)
    (* Label (Atom "let x =", Atom "123", default_label_config) *)
  (* in *)
  (* test ~easyFormat:ef ~easyWadler:ew 10 *)

(* (* no space after key of key:value pair in label *) *)
(* possible diff between easy_format and easy_wadler
 * easy_format breaks on width 10, easy_wadler doesn't *)
(* let () = *)
  (* let ef = *)
    (* let open Easy_format in *)
    (* let a = Atom ("let x =", atom) in *)
    (* Label((a, {label with space_after_label = false}), Atom ("123", atom)) *)
  (* in *)
  (* let ew = *)
    (* let open Easy_wadler in *)
    (* Label (Atom "let x =", Atom "123", { default_label_config with space_after_label = false}) *)
  (* in *)
  (* test ~easyFormat:ef ~easyWadler:ew 11 *)

(* label with list as value, opening of list sticks to key of label
 * let x = {
 *   1,
 *   2,
 *   3
 * }
 *)
(* let () = *)
  (* let ef = *)
    (* let open Easy_format in *)
    (* let a = Atom ("let x =", atom) in *)
   (* let body = *)
      (* let a = Atom ("maxim", atom) in *)
      (* [a; a; a; a; a]  *)
    (* in *)
    (* let lst = List (("{", ",", "}", {list with align_closing = false; wrap_body = `Never_wrap; stick_to_label = false }), body) in *)
    (* Label((a, label), lst) *)
  (* in *)
  (* let ew = *)
    (* let open Easy_wadler in *)
    (* Atom "test" *)
  (* in *)
  (* test ~easyFormat:ef ~easyWadler:ew 25 *)

(* let () = *)
  (* let ef = *)
  (* let open Easy_format in *)
   (* let a = Atom ("let x =", atom) in *)
   (* let body = *)
     (* let a = Atom ("maxim", atom) in *)
     (* [a; a]; *)
   (* in *)
    (* let lst = List (("{", ",", "}", {list with align_closing = false; wrap_body = `Force_breaks_rec; stick_to_label = false }), body) in *)
    (* Label((a, { label with label_break = `Auto}), lst) *)
  (* in *)
  (* let ew = *)
    (* let open Easy_wadler in *)
    (* Atom "maxim" *)
  (* in *)
  (* test ~easyFormat:ef ~easyWadler:ew 25 *)



